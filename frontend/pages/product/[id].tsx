import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import Head from "next/head";
import axios from "axios";
import {
  MdOutlineFavoriteBorder,
  MdFavorite,
  MdRemoveCircleOutline,
  MdAddCircleOutline,
  MdDoNotDisturbAlt,
} from "react-icons/md";
import { FaShoppingCart } from "react-icons/fa";
import { BsBagCheckFill } from "react-icons/bs";
import { toast } from "react-toastify";

import { numberFormat } from "../../utils/numberFormatter";
import { reviews } from "../../assets/data/reviewsData";
import ReviewComponent from "../../components/Product/Review";
import StarRating from "../../components/Product/StarRating";
import RatingProgressBar from "../../components/Product/RatingProgressBar";
import { NEXT_PRODUCT_URL } from "../../utils/constants";
import { Product } from "../../types/productTypes";
import useAuthStore from "../../store/useAuthStore";
import { deleteWishlist, saveWishlist } from "../../services/wishlist";
import { User } from "../../types/userTypes";

type Props = {
  data: Product;
};

const Product = (props: Props) => {
  const { isAuthenticated, userAccount, setUserAccount } = useAuthStore(
    (state) => state
  );
  const { data: product } = props;
  const discountPrice = (
    (Number(product.discount) * Number(product.price)) /
    100
  ).toFixed(0);
  const [quantity, setQuantity] = useState(1);
  const [isFavourite, setIsFavourite] = useState(false);
  const [mainImage, setMainImage] = useState("");
  const [prevMainImage, setPrevMainImage] = useState("");
  const [selectedColor, setSelectedColor] = useState("");
  const [selectedSize, setSelectedSize] = useState("");
  const [selectedTab, setSelectedTab] = useState(0);

  const changeQuantity = (type: boolean) => {
    if (type) {
      if (quantity < product.quantity) {
        setQuantity(quantity + 1);
      } else {
        toast.error("Sorry, we don't have enough stock");
      }
    } else {
      if (quantity > 1) {
        setQuantity(quantity - 1);
      }
    }
  };

  const changeTab = (index: number) => {
    setSelectedTab(index);
  };

  const setMainImageHandler = (
    image: string,
    isHover: boolean,
    type: string
  ) => {
    if (isHover) {
      setPrevMainImage(mainImage);
      if (type === "enter") {
        setMainImage(image);
      } else if (type === "leave") {
        if (prevMainImage !== "") {
          setMainImage(prevMainImage);
        }
      }
    } else {
      setMainImage(image);
      setPrevMainImage("");
    }
  };

  const savedToWishlist = async () => {
    if (!isAuthenticated) {
      toast.error("Please login to add to wishlist");
      return;
    }

    let saveProduct: User | undefined;
    if (isFavourite) {
      saveProduct = await deleteWishlist(product, userAccount.token);
    } else {
      saveProduct = await saveWishlist(product, userAccount.token);
    }
    if (saveProduct) {
      setUserAccount(saveProduct);
      setIsFavourite(!isFavourite);
    }
  };

  useEffect(() => {
    setMainImage(product.image[0] as string);
    setSelectedColor(product.colors[0]);
    setSelectedSize(product.sizes[0]);
    if (userAccount && isAuthenticated) {
      userAccount.wishlist.forEach((item) => {
        if (item.productId === product._id) {
          setIsFavourite(true);
        }
      });
    }
  }, []);
  return (
    <>
      <Head>
        <title>{product.title} - KCIBEcom</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="mt-5 md:mt-20">
        <div className="product__container m-4 md:m-10">
          <div className="product__category--path mb-3 text-sm text-gray-400 px-1">
            <Link href={`/category/${product.category}`}>
              {product.category}
            </Link>{" "}
            /{" "}
            <Link href={`/search/${product.subCategory}`}>
              {product.subCategory}
            </Link>{" "}
            {product.brand && (
              <Link
                href={`/search/${product.brand}`}
              >{`/ ${product.brand}`}</Link>
            )}{" "}
            / {product.title.substring(0, 30)}
            ...
          </div>
          <div className="product__content p-4 bg-white rounded shadow-md flex flex-col md:flex-row w-full gap-5">
            <div className="product__images w-full md:w-[40%]">
              <div className="product__image--main max-w-[450px] w-full min-w-[200px] overflow-hidden rounded-md">
                <Image
                  src={`${mainImage}`}
                  alt="product"
                  layout="responsive"
                  width="100%"
                  height="100%"
                  objectFit="contain"
                />
              </div>
              <div className="product__image--others flex flex-wrap gap-3 mt-3">
                {product.image.map((image, index) => (
                  <div
                    className="product__image--other w-[40px] md:w-[60px] h-[40px] md:h-[60px] overflow-hidden rounded-md cursor-pointer hover:border hover:border-gray-300"
                    onMouseEnter={() =>
                      setMainImageHandler(image as string, true, "enter")
                    }
                    onMouseLeave={() =>
                      setMainImageHandler(image as string, true, "leave")
                    }
                    onClick={() =>
                      setMainImageHandler(image as string, false, "")
                    }
                    key={index}
                  >
                    <Image
                      src={image as string}
                      alt="product"
                      layout="responsive"
                      width="100%"
                      height="100%"
                      objectFit="cover"
                    />
                  </div>
                ))}
              </div>
            </div>
            <div className="product__details w-full md:w-[60%] px-0 md:px-5">
              <div className="product__details--top mb-2 md:mb-1 flex items-center justify-between">
                <h1 className="product__details--title text-lg md:text-2xl font-semibold">
                  {product.title}
                </h1>
                <span
                  className="product__details--save mx-2 cursor-pointer"
                  onClick={savedToWishlist}
                >
                  {isFavourite && (
                    <MdFavorite className="text-3xl secondary-color" />
                  )}
                  {!isFavourite && (
                    <MdOutlineFavoriteBorder className="text-3xl secondary-color" />
                  )}
                </span>
              </div>
              {product.sellerName && (
                <div className="product__details--seller mb-2 md:mb-1">
                  <p className="text-base font-semibold">
                    Seller:{" "}
                    <Link href={`/merchant/${product.sellerId}`}>
                      <span className="primary-color font-medium hover:underline cursor-pointer">
                        {product.sellerName}
                      </span>
                    </Link>
                  </p>
                </div>
              )}
              {product.brand && (
                <div className="product__details--brand mb-2 md:mb-1">
                  <p className="text-base font-semibold">
                    Brand:{" "}
                    <Link href="">
                      <span className="primary-color font-medium hover:underline cursor-pointer">
                        {product.brand}
                      </span>
                    </Link>
                  </p>
                </div>
              )}
              <Link href="#reviews">
                <div className="product__details--rating flex items-center mb-2 cursor-pointer">
                  <StarRating rating={product.rating} textSize="text-base" />
                  <div className="product__rating--reviews text-sm md:text-base font-normal light-primary-color hover:underline ml-2">
                    <p>
                      <span className="font-semibold text-gray-800">
                        {product.rating}
                      </span>{" "}
                      ({product.totalRating | 0} Ratings)
                    </p>
                  </div>
                </div>
              </Link>
              <hr />
              <div className="product__details--price pb-2 pt-2">
                <p className="text-[1.5rem] font-semibold mb-1">
                  {`${
                    Number(discountPrice) > 0
                      ? numberFormat(
                          Number(product.price) - Number(discountPrice)
                        )
                      : numberFormat(Number(product.price))
                  }`}
                  <span className="text-xs font-normal ml-1">NGN</span>
                </p>
                {Number(product.discount) > 0 && (
                  <div className="product__price--discount text-gray-500 flex items-center">
                    <p className="text-sm font-medium line-through mr-2">
                      {numberFormat(Number(product.price))}
                    </p>
                    <p className="text-xs secondary-bg rounded px-1 font-medium text-white">{`-${product.discount}%`}</p>
                  </div>
                )}
              </div>
              <hr />
              <div className="product__details--misc">
                <div className="product__misc--availability flex items-center my-4">
                  <p className="text-base font-medium">
                    Availability:{" "}
                    {product.available && (
                      <span className="ml-3 primary-color">In Stock</span>
                    )}
                    {!product.available && (
                      <span className="ml-3 text-red-500">Unavailable</span>
                    )}
                  </p>
                </div>
                <div className="product__misc--quantity flex items-center mb-4 mt-2">
                  <p className="text-base font-medium mr-3">Quantity:</p>
                  <div className="product__misc--quantity--input flex items-center">
                    <button
                      className="product__quantity--input minus mr-2"
                      onClick={() => changeQuantity(false)}
                    >
                      <MdRemoveCircleOutline className="text-2xl secondary-color" />
                    </button>
                    <input
                      type="number"
                      className="product__quantity--input number max-w-[80px] border-none outline-none bg-white text-center"
                      value={quantity}
                      max={10}
                      disabled
                    />
                    <button
                      className="product__quantity--input plus ml-2"
                      onClick={() => changeQuantity(true)}
                    >
                      <MdAddCircleOutline className="text-2xl secondary-color" />
                    </button>
                  </div>
                </div>
                {product.colors.length && (
                  <div className="product__misc--colors flex items-center mb-4">
                    <p className="text-base font-medium mr-3">Colors:</p>
                    <div className="product__color--list flex items-center flex-wrap">
                      {product.colors.map((color, index) => (
                        <div
                          className={`product__color w-7 h-7 rounded-full border ${
                            selectedColor === color
                              ? "border-black"
                              : "border-gray-200"
                          } cursor-pointer mr-2 md:mr-4`}
                          style={{
                            backgroundColor: color,
                          }}
                          onClick={() => setSelectedColor(color)}
                          key={index}
                        ></div>
                      ))}
                    </div>
                  </div>
                )}
                {product.sizes.length && (
                  <div className="product__misc--sizes flex items-center">
                    <p className="text-base font-medium mr-3">Size:</p>
                    <div className="product__size--list flex items-center flex-wrap">
                      {product.sizes.map((size, index) => (
                        <div
                          className={`product__size text-sm md:text-base font-semibold px-3 py-1 rounded border ${
                            selectedSize === size
                              ? "border-black"
                              : "border-gray-200"
                          }  cursor-pointer mr-2 md:mr-4`}
                          onClick={() => setSelectedSize(size)}
                          key={index}
                        >
                          {size}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              {product.available && (
                <div className="product__btns mt-5 flex items-center">
                  <button className="product__btn--cart mr-3 md:mr-4 hover:scale-95 transition ease-in-out delay-150 duration-200 px-5 py-3 md:py-2 border border-[#f8b944] rounded flex items-center shadow-sm">
                    <FaShoppingCart className="mr-2 md:mr-4 text-lg md:text-xl secondary-color" />
                    <span className="text-sm md:text-base font-semibold secondary-color">
                      Add To Cart
                    </span>
                  </button>
                  <button className="product__btn--cart shadow-md hover:scale-95 transition ease-in-out delay-150 duration-200 px-5 py-3 md:py-2 bg-[#f8b944] rounded flex items-center">
                    <BsBagCheckFill className="mr-2 md:mr-4 text-lg md:text-xl text-white" />
                    <span className="text-sm md:text-base font-semibold text-white">
                      Buy Now
                    </span>
                  </button>
                </div>
              )}
              {!product.available && (
                <div className="product__btns mt-5 flex items-center">
                  <button className="product__btn--cart cursor-not-allowed shadow-sm px-5 py-3 md:py-2 bg-gray-100 rounded flex items-center border border-red-300">
                    <MdDoNotDisturbAlt className="mr-2 md:mr-4 text-lg md:text-xl text-red-500" />
                    <span className="text-sm md:text-base font-semibold text-gray-500">
                      Item Unavailable
                    </span>
                  </button>
                </div>
              )}
            </div>
          </div>
          <div className="product__detail--tab bg-white rounded shadow-md w-full mt-2 md:mt-4">
            <div className="detail__tab--bar">
              <ul className="tab__bar--lists flex items-center">
                <li
                  className={`tab__bar--item py-2 px-3 text-center font-semibold text-base cursor-pointer transition duration-200 border-b-2 border-b-transparent hover:border-b-black description__tab ${
                    selectedTab === 0 && "active"
                  }`}
                  onClick={() => changeTab(0)}
                >
                  <span className="tab__item--text">Description</span>
                </li>
                <li
                  className={`tab__bar--item py-2 px-3 text-center font-semibold text-base cursor-pointer transition duration-200 border-b-2 border-b-transparent hover:border-b-black reviews__tab ${
                    selectedTab === 1 && "active"
                  }`}
                  onClick={() => changeTab(1)}
                >
                  <span className="tab__item--text">Reviews</span>
                </li>
                <li
                  className={`tab__bar--item py-2 px-3 text-center font-semibold text-base cursor-pointer transition duration-200 border-b-2 border-b-transparent hover:border-b-black specification__tab ${
                    selectedTab === 2 && "active"
                  }`}
                  onClick={() => changeTab(2)}
                >
                  <span className="tab__item--text">Specification</span>
                </li>
              </ul>
            </div>
            <hr />
            <div className="detail__tab--content p-4">
              <div
                className={`product__descriptions ${
                  selectedTab !== 0 && "hidden"
                }`}
              >
                <div
                  className="product__description--body text-left"
                  id="description"
                >
                  <p
                    className="text-base font-normal"
                    dangerouslySetInnerHTML={{
                      __html: product.description.replaceAll("\n", "<br />"),
                    }}
                  ></p>
                </div>
              </div>
              <div
                className={`product__review ${selectedTab !== 1 && "hidden"}`}
                id="reviews"
              >
                <div className="product__review--content py-3">
                  <div className="product__rating flex items-center flex-col justify-around pb-2 md:flex-row">
                    <div className="product__rate--score flex flex-col justify-center items-center">
                      <h3 className="text-4xl text-[#f8b944] font-bold mb-2">
                        {product.rating}/5.0
                      </h3>
                      <StarRating rating={product.rating} />
                      <p className="text-base font-semibold text-gray-700 mt-2">
                        {product.reviews?.length | 0} Reviews
                      </p>
                    </div>
                    <div className="product__rate--list mt-4 md:mt-0">
                      <ul className="">
                        <RatingProgressBar
                          rating={5}
                          percentage={70}
                          totalRating={55}
                        />
                        <RatingProgressBar
                          rating={4}
                          percentage={25}
                          totalRating={10}
                        />
                        <RatingProgressBar
                          rating={3}
                          percentage={0}
                          totalRating={0}
                        />
                        <RatingProgressBar
                          rating={2}
                          percentage={5}
                          totalRating={3}
                        />
                        <RatingProgressBar
                          rating={1}
                          percentage={0}
                          totalRating={0}
                        />
                      </ul>
                    </div>
                    <div className="product__rate--btn my-3 md:my-0">
                      <button className="rate rounded shadow-md px-4 py-3 secondary-bg text-white font-semibold outline-none border-none">
                        Rate this product
                      </button>
                    </div>
                  </div>
                  <hr />
                  <div className="product__users--reviews">
                    {reviews.map((review) => (
                      <ReviewComponent review={review} key={review.id} />
                    ))}
                  </div>
                </div>
              </div>
              <div
                className={`product__specs ${selectedTab !== 2 && "hidden"}`}
              >
                <h3 className="">Specifications</h3>
              </div>
            </div>
          </div>

          <div className="similar__products"></div>
        </div>
      </div>
    </>
  );
};

export const getServerSideProps = async ({
  params: { id },
}: {
  params: {
    id: string;
  };
}) => {
  const result = await axios.get(`${NEXT_PRODUCT_URL}/${id}`);

  return {
    props: {
      data: result?.data?.data as Product,
    },
  };
};

export default Product;
